{"version":3,"file":"index/dist/scripts/index.js","mappings":"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","sources":["webpack://craft-content-templates/./src/web/assets/index/src/scripts/main.ts"],"sourcesContent":["/*\nThis file is based on `Craft.EntryIndex` from Craft CMS 4.3.10, by Pixel & Tonic, Inc.\nhttps://github.com/craftcms/cms/blob/4.3.10/src/web/assets/cp/src/js/EntryIndex.js\nCraft CMS is released under the terms of the Craft License, a copy of which is included below.\nhttps://github.com/craftcms/cms/blob/4.3.10/LICENSE.md\n\nCopyright © Pixel & Tonic\n\nPermission is hereby granted to any person obtaining a copy of this software\n(the “Software”) to use, copy, modify, merge, publish and/or distribute copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\n1. **Don’t plagiarize.** The above copyright notice and this license shall be\n   included in all copies or substantial portions of the Software.\n\n2. **Don’t use the same license on more than one project.** Each licensed copy\n   of the Software shall be actively installed in no more than one production\n   environment at a time.\n\n3. **Don’t mess with the licensing features.** Software features related to\n   licensing shall not be altered or circumvented in any way, including (but\n   not limited to) license validation, payment prompts, feature restrictions,\n   and update eligibility.\n\n4. **Pay up.** Payment shall be made immediately upon receipt of any notice,\n   prompt, reminder, or other message indicating that a payment is owed.\n\n5. **Follow the law.** All use of the Software shall not violate any applicable\n   law or regulation, nor infringe the rights of any other person or entity.\n\nFailure to comply with the foregoing conditions will automatically and\nimmediately result in termination of the permission granted hereby. This\nlicense does not include any right to receive updates to the Software or\ntechnical support. Licensees bear all risk related to the quality and\nperformance of the Software and any modifications made or obtained to it,\nincluding liability for actual and consequential harm, such as loss or\ncorruption of data, and any necessary service, repair, or correction.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER\nLIABILITY, INCLUDING SPECIAL, INCIDENTAL AND CONSEQUENTIAL DAMAGES, WHETHER IN\nAN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\ndeclare const ContentTemplates: {\n  IndexSettings: {\n    entryTypes: EntryType[]\n  }\n}\n\ninterface ContentTemplateIndexInterface extends BaseElementIndexInterface {\n  _createContentTemplate: (entryTypeId: number) => void\n  _entryTypes: EntryType[]\n  _menu: any\n  $newTemplateBtn: JQuery|null\n  $newTemplateBtnGroup: JQuery|null\n  addListener: (elem: HTMLElement|JQuery, events: string|string[], data: object|Function|string, func?: Function|string) => void\n}\n\nconst ContentTemplateIndex = Craft.BaseElementIndex.extend({\n  $newTemplateBtnGroup: null,\n  $newTemplateBtn: null,\n\n  init (elementType: string, $container: JQuery, settings: object) {\n    this.on('selectSource', this.updateButton.bind(this))\n    this.on('selectSite', this.updateButton.bind(this))\n    this.base(elementType, $container, settings)\n  },\n\n  afterInit () {\n    // Set our local entry type data\n    this._entryTypes = ContentTemplates.IndexSettings.entryTypes\n    this.base()\n  },\n\n  createView (mode: string, settings: object) {\n    // Remove any structure update listeners on the old view\n    this.view?.structureTableSort?.off('positionChange')\n\n    // Listen for structure updates on the new view\n    const newView = this.base(mode, settings)\n    newView.structureTableSort?.on('positionChange', (e: any) => {\n      // Send new structure data to server, which will update the project config\n      const data = {\n        type: e.target.tableView.elementIndex.$source.data('key').substring(10),\n        elementIds: e.target.$items.get().map((item: HTMLElement) => item.getAttribute('data-id'))\n      }\n      Craft.sendActionRequest('POST', 'content-templates/cp/save-config-order', { data })\n        .catch((_) => console.warn('Unable to update project config for content template order'))\n    })\n\n    return newView\n  },\n\n  updateButton (this: ContentTemplateIndexInterface) {\n    if (this.$source === null) {\n      return\n    }\n\n    const handle: string = this.$source.data('handle') as string\n    const selectedEntryType = this._entryTypes.find((entryType: EntryType) => entryType.handle === handle)\n\n    if (typeof selectedEntryType === 'undefined') {\n      throw new Error(`Element index source handle \"${handle}\" is invalid`)\n    }\n\n    // Update the New Template button\n    if (this.$newTemplateBtnGroup !== null) {\n      this.$newTemplateBtnGroup.remove()\n    }\n\n    this.$newTemplateBtnGroup = $('<div class=\"btngroup submit\" data-wrapper/>')\n    let $menuBtn: JQuery|null = null\n    const menuId = 'new-content-template-menu-' + Craft.randomString(10)\n    const visibleLabel =\n      this.settings.context === 'index'\n        ? Craft.t('content-templates', 'New content template')\n        : Craft.t('content-templates', 'New {entryType} content template', {\n          entryType: selectedEntryType.name\n        })\n\n    const ariaLabel =\n      this.settings.context === 'index'\n        ? Craft.t('content-templates', 'New content template of the {entryType} type', {\n          entryType: selectedEntryType.name\n        })\n        : visibleLabel\n\n    // In index contexts, the button functions as a link\n    // In non-index contexts, the button triggers a slideout editor\n    const role = this.settings.context === 'index' ? 'link' : null\n\n    this.$newTemplateBtn = Craft.ui\n      .createButton({\n        label: visibleLabel,\n        ariaLabel: ariaLabel,\n        spinner: true,\n        role: role\n      })\n      .addClass('submit add icon')\n      .appendTo(this.$newTemplateBtnGroup) as JQuery<HTMLElement>\n\n    this.addListener(this.$newTemplateBtn, 'click mousedown', (ev: JQuery.ClickEvent|JQuery.MouseDownEvent) => {\n      // If this is the element index, check for Ctrl+clicks and middle button clicks\n      if (\n        this.settings.context === 'index' &&\n        ((ev.type === 'click' && Garnish.isCtrlKeyPressed(ev)) ||\n          (ev.type === 'mousedown' && ev.originalEvent?.button === 1))\n      ) {\n        window.open(Craft.getUrl(`content-templates/${selectedEntryType.id}/new`))\n      } else if (ev.type === 'click') {\n        this._createContentTemplate(selectedEntryType.id)\n      }\n    })\n\n    if (this._entryTypes.length > 1) {\n      $menuBtn = $('<button/>', {\n        type: 'button',\n        class: 'btn submit menubtn btngroup-btn-last',\n        'aria-controls': menuId,\n        'data-disclosure-trigger': '',\n        'aria-label': Craft.t('content-templates', 'New content template, choose an entry type')\n      }).appendTo(this.$newTemplateBtnGroup)\n    }\n\n    this.addButton(this.$newTemplateBtnGroup)\n\n    if ($menuBtn !== null) {\n      const $menuContainer = $('<div/>', {\n        id: menuId,\n        class: 'menu menu--disclosure'\n      }).appendTo(this.$newTemplateBtnGroup)\n      const $ul = $('<ul/>').appendTo($menuContainer)\n\n      this._entryTypes.forEach((entryType: EntryType) => {\n        const anchorRole = this.settings.context === 'index' ? 'link' : 'button'\n        if (\n          // TODO\n          // (this.settings.context === 'index' && (entryType.section?.sites.includes(this.siteId) ?? false)) ||\n          this.settings.context === 'index' ||\n          (this.settings.context !== 'index' && entryType !== selectedEntryType)\n        ) {\n          const $li = $('<li/>').appendTo($ul)\n          const $a = $('<a/>', {\n            role: anchorRole === 'button' ? 'button' : null,\n            href: '#', // Allows for click listener and tab order\n            type: anchorRole === 'button' ? 'button' : null,\n            text: Craft.t('content-templates', 'New {entryType} content template', {\n              entryType: entryType.name\n            })\n          }).appendTo($li)\n          this.addListener($a, 'click', () => {\n            $menuBtn?.data('trigger').hide()\n            this._createContentTemplate(entryType.id)\n          })\n\n          if (anchorRole === 'button') {\n            this.addListener($a, 'keydown', (event: KeyboardEvent) => {\n              if (event.keyCode === Garnish.SPACE_KEY) {\n                event.preventDefault()\n                $menuBtn?.data('trigger').hide()\n                this._createContentTemplate(entryType.id)\n              }\n            })\n          }\n        }\n      })\n\n      this._menu = new Garnish.DisclosureMenu($menuBtn)\n    }\n\n    // Update the URL if we're on the Content Templates index\n    // ---------------------------------------------------------------------\n\n    if (this.settings.context === 'index') {\n      let uri = 'content-templates'\n\n      if (typeof handle !== 'undefined') {\n        uri += '/' + handle\n      }\n\n      Craft.setPath(uri)\n    }\n  },\n\n  _createContentTemplate (this: ContentTemplateIndexInterface, entryTypeId: number) {\n    if (this.$newTemplateBtn?.hasClass('loading') ?? false) {\n      console.warn('New content template creation already in progress.')\n      return\n    }\n\n    // Find the entry type\n    const entryType = this._entryTypes.find((entryType: EntryType) => entryType.id === entryTypeId)\n\n    if (typeof entryType === 'undefined') {\n      throw new Error(`Invalid entry type ID: ${entryTypeId}`)\n    }\n\n    this.$newTemplateBtn?.addClass('loading')\n\n    Craft.sendActionRequest('POST', 'content-templates/cp/create', {\n      data: {\n        siteId: this.siteId,\n        entryType: entryType.handle\n      }\n    })\n      .then(({ data }) => {\n        document.location.href = Craft.getUrl(data.cpEditUrl, { fresh: 1 })\n      })\n      .finally(() => {\n        this.$newTemplateBtn?.removeClass('loading')\n      })\n  }\n})\n\n// Register it!\nCraft.registerElementIndexClass('spicyweb\\\\contenttemplates\\\\elements\\\\ContentTemplate', ContentTemplateIndex)\n"],"names":["ContentTemplateIndex","Craft","BaseElementIndex","extend","$newTemplateBtnGroup","$newTemplateBtn","init","elementType","$container","settings","this","on","updateButton","bind","base","afterInit","_entryTypes","ContentTemplates","IndexSettings","entryTypes","createView","mode","view","structureTableSort","off","newView","e","data","type","target","tableView","elementIndex","$source","substring","elementIds","$items","get","map","item","getAttribute","sendActionRequest","catch","_","console","warn","handle","selectedEntryType","find","entryType","Error","remove","$","$menuBtn","menuId","randomString","visibleLabel","context","t","name","ariaLabel","role","ui","createButton","label","spinner","addClass","appendTo","addListener","ev","Garnish","isCtrlKeyPressed","originalEvent","button","window","open","getUrl","id","_createContentTemplate","length","class","addButton","$menuContainer","$ul","forEach","anchorRole","$li","$a","href","text","hide","event","keyCode","SPACE_KEY","preventDefault","_menu","DisclosureMenu","uri","setPath","entryTypeId","hasClass","siteId","then","document","location","cpEditUrl","fresh","finally","removeClass","registerElementIndexClass"],"sourceRoot":""}